# kubegenesis/bin/kubegenesis
#!/bin/bash

# --- Variáveis Globais ---
KUBEG_ROOT_DIR=$(dirname "$(dirname "$(readlink -f "$0")")") # Pega o diretório raiz do projeto
KUBEG_SRC_DIR="$KUBEG_ROOT_DIR/src"
KUBEG_TEMPLATES_DIR="$KUBEG_SRC_DIR/templates"
KUBEG_LIB_DIR="$KUBEG_SRC_DIR/lib"

# --- Incluir bibliotecas ---
source "$KUBEG_LIB_DIR/utils.sh" # Para funções como log_info, log_error, etc.

# --- Funções da CLI ---

# kubegenesis init <project_name>
cmd_init() {
    local project_name="$1"
    if [ -z "$project_name" ]; then
        log_error "Usage: kubegenesis init <project_name>"
        exit 1
    fi

    log_info "Initializing new KubeGenesis project: $project_name"
    mkdir -p "$project_name"
    cd "$project_name" || exit 1

    # Perguntar ao usuário sobre o provedor de nuvem
    local cloud_provider
    read -p "Enter cloud provider (aws, gcp, local): " cloud_provider
    cloud_provider=${cloud_provider:-local} # Default para 'local'

    # Perguntar sobre o nome do cluster
    local cluster_name
    read -p "Enter cluster name (e.g., my-prod-cluster): " cluster_name
    cluster_name=${cluster_name:-default-cluster}

    log_info "Generating project structure..."

    # Copiar templates básicos
    cp -r "$KUBEG_TEMPLATES_DIR/project_base/"* .

    # Processar o kubegenesis.yml inicial
    sed -i "s/{{CLOUD_PROVIDER}}/$cloud_provider/g" kubegenesis.yml
    sed -i "s/{{CLUSTER_NAME}}/$cluster_name/g" kubegenesis.yml

    log_success "Project '$project_name' initialized successfully!"
    log_info "Next steps: cd $project_name && kubegenesis create"
}

# kubegenesis create
cmd_create() {
    log_info "Starting cluster creation process..."
    
    # Validar se estamos em um diretório de projeto KubeGenesis
    if [ ! -f "kubegenesis.yml" ]; then
        log_error "kubegenesis.yml not found. Are you in a KubeGenesis project directory?"
        exit 1
    fi

    local config_file="kubegenesis.yml"
    local num_tasks=$(yq '.provisioningTasks | length' "$config_file")
    log_info "Found $num_tasks provisioning tasks."

    for i in $(seq 0 $(($num_tasks - 1))); do
        local task_path=".provisioningTasks[$i]"
        local task_name=$(yq "$task_path.name" "$config_file")
        log_info "Executing task: $task_name"
        
        # --- AQUI VAI A LÓGICA DE INTERPRETAÇÃO DA "LINGUAGEM" ---
        # Por enquanto, apenas imprime o tipo de tarefa
        if [[ $(yq "$task_path | has(\"run\")" "$config_file") == "true" ]]; then
            log_info "  -> Type: run"
        elif [[ $(yq "$task_path | has(\"terraform\")" "$config_file") == "true" ]]; then
            log_info "  -> Type: terraform"
        elif [[ $(yq "$task_path | has(\"ansible\")" "$config_file") == "true" ]]; then
            log_info "  -> Type: ansible"
        elif [[ $(yq "$task_path | has(\"kubernetes\")" "$config_file") == "true" ]]; then
            log_info "  -> Type: kubernetes"
        else
            log_warn "  -> Type: Unknown (Skipping)"
        fi
    done

    log_success "Cluster creation process completed (simulated)."
}

# kubegenesis destroy
cmd_destroy() {
    log_info "Starting cluster destruction process..."
    if [ ! -f "kubegenesis.yml" ]; then
        log_error "kubegenesis.yml not found. Are you in a KubeGenesis project directory?"
        exit 1
    fi
    log_warn "This will destroy all resources defined in kubegenesis.yml. Are you sure? (yes/no)"
    read -p "> " confirm
    if [ "$confirm" != "yes" ]; then
        log_info "Destruction cancelled."
        exit 0
    fi
    log_success "Cluster destroyed (simulated)."
}

# --- Main CLI Logic ---
case "$1" in
    (init)
        cmd_init "$2"
        ;;
    (create)
        cmd_create
        ;;
    (destroy)
        cmd_destroy
        ;;
    (*)
        log_error "Unknown command: $1"
        log_info "Usage: kubegenesis [init|create|destroy]"
        exit 1
        ;;
esac
